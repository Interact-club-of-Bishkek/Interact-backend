from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from rest_framework.generics import ListAPIView, RetrieveAPIView
import asyncio
import nest_asyncio
import random
import string
from threading import Lock
from django.shortcuts import render
from bot import send_text_to_user
from form.models import TextMailing
from asgiref.sync import sync_to_async, async_to_sync
from datetime import datetime, timedelta
from form.models import VolunteerForm, WaitingList, VolunteerFormArchive, MailingPending
from users.models import Volunteer
from form.serializers import VolunteerFormSerializer, WaitingListSerializer, MailingPendingSerializer

from bot import send_account_data_to_users  # –ò–º–ø–æ—Ä—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –±–æ—Ç–∞


class VerifyVolunteerFormView(APIView):
    def post(self, request, pk):
        try:
            form = VolunteerForm.objects.get(pk=pk)
        except VolunteerForm.DoesNotExist:
            return Response({"detail": "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}, status=status.HTTP_404_NOT_FOUND)

        if form.is_verified:
            return Response({"detail": "–ó–∞—è–≤–∫–∞ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞"}, status=status.HTTP_400_BAD_REQUEST)

        form.is_verified = True
        form.save()

        waiting = WaitingList.objects.create(
            name=form.name,
            phone_number=form.phone_number,
            image=form.image,
            telegram_username=form.telegram_username,
            telegram_id=form.telegram_id
        )
        form.delete()

        # üì© –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ TextMailing
        if waiting.telegram_id:
            try:
                text = TextMailing.objects.latest("id").text
            except TextMailing.DoesNotExist:
                text = "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è ‚úÖ"

            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
            nest_asyncio.apply()
            try:
                asyncio.run(send_text_to_user(waiting.telegram_id, text))
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ Telegram —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

        return Response({"detail": f"–ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è {waiting.name}"}, status=200)

class ApproveWaitingListView(APIView):
    def post(self, request, pk):
        try:
            waiting = WaitingList.objects.get(pk=pk)
        except WaitingList.DoesNotExist:
            return Response({"detail": "–ù–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è"}, status=status.HTTP_404_NOT_FOUND)

        if waiting.is_approved:
            return Response({"detail": "–ó–∞—è–≤–∫–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ"}, status=status.HTTP_400_BAD_REQUEST)

        waiting.is_approved = True
        waiting.save()

        mailing = MailingPending.objects.create(
            name=waiting.name,
            phone_number=waiting.phone_number,
            image=waiting.image,
            telegram_username=waiting.telegram_username,
            telegram_id=waiting.telegram_id
        )
        waiting.delete()

        return Response({"detail": f"–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ —Ä–∞—Å—Å—ã–ª–∫—É: {mailing.name}"}, status=200)


def generate_credentials(name):
    login = ''.join(e for e in name.lower() if e.isalnum())[:8] + str(random.randint(10, 99))
    password = ''.join(random.choices(string.ascii_letters + string.digits, k=10))
    return login, password

approve_lock = Lock()

class ApproveAllFromMailingPendingView(APIView):
    def post(self, request):
        if not approve_lock.acquire(blocking=False):
            return Response({"detail": "–ó–∞–ø—Ä–æ—Å —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"}, status=429)

        async def process_and_send():
            try:
                pendings = await sync_to_async(list)(MailingPending.objects.all())
                created = []

                for pending in pendings:
                    login, password = generate_credentials(pending.name)
                    volunteer = Volunteer(
                        name=pending.name,
                        phone_number=pending.phone_number,
                        image=pending.image,
                        telegram_username=pending.telegram_username,
                        telegram_id=pending.telegram_id,
                        login=login,
                        visible_password=password
                    )
                    await sync_to_async(volunteer.save)()
                    await sync_to_async(VolunteerFormArchive.objects.create)(
                        name=pending.name,
                        phone_number=pending.phone_number,
                        image=pending.image,
                        telegram_username=pending.telegram_username,
                        telegram_id=pending.telegram_id,
                        moved_to="volunteer"
                    )
                    if pending.telegram_id:
                        msg = (
                            f"üëã –ü—Ä–∏–≤–µ—Ç, {pending.name}!\n\n"
                            f"–¢—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤!\n\n"
                            f"üîê –õ–æ–≥–∏–Ω: <code>{login}</code>\n"
                            f"üîë –ü–∞—Ä–æ–ª—å: <code>{password}</code>"
                        )
                        await send_text_to_user(pending.telegram_id, msg)

                    created.append(pending.name)

                await sync_to_async(MailingPending.objects.all().delete)()
                return created

            finally:
                approve_lock.release()

        created_names = async_to_sync(process_and_send)()
        return Response({"detail": f"–°–æ–∑–¥–∞–Ω–æ –∏ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ: {created_names}"}, status=200)
    

class VolunteerFormListView(ListAPIView):
    queryset = VolunteerForm.objects.all()
    serializer_class = VolunteerFormSerializer


class WaitingListListView(ListAPIView):
    queryset = WaitingList.objects.all()
    serializer_class = WaitingListSerializer


class MailingPendingListView(ListAPIView):
    queryset = MailingPending.objects.all()
    serializer_class = MailingPendingSerializer


class MailingPendingDetailView(RetrieveAPIView):
    queryset = MailingPending.objects.all()
    serializer_class = MailingPendingSerializer


class VolunteerFormDetailView(RetrieveAPIView):
    queryset = VolunteerForm.objects.all()
    serializer_class = VolunteerFormSerializer


class WaitingListDetailView(RetrieveAPIView):
    queryset = WaitingList.objects.all()
    serializer_class = WaitingListSerializer

def schedule_view(request):
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤ –ø–æ –∏–º–µ–Ω–∏ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    volunteers = WaitingList.objects.all().order_by('name')

    start_time = datetime.strptime("09:00", "%H:%M")
    block_duration = timedelta(minutes=30)
    volunteers_per_block = 30

    rows = []

    for i in range(0, len(volunteers), volunteers_per_block):
        block_volunteers = volunteers[i:i+volunteers_per_block]
        interval_start = start_time + block_duration * (i // volunteers_per_block)
        interval_end = interval_start + block_duration
        interval_str = f"{interval_start.strftime('%H:%M')}-{interval_end.strftime('%H:%M')}"

        # –í–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–æ–±—ã—á–Ω–æ —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã)
        block_volunteers = sorted(block_volunteers, key=lambda v: v.name)

        for volunteer in block_volunteers:
            rows.append({
                "name": volunteer.name,
                "phone_number": volunteer.phone_number,
                "interval": interval_str,
            })

    return render(request, "schedule.html", {"rows": rows})